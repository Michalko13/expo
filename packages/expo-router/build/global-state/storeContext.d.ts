export declare const StoreContext: import("react").Context<{
    shouldShowTutorial(): boolean;
    readonly state: import("./router-store").ReactNavigationState | undefined;
    readonly focusedState: import("@react-navigation/core/lib/typescript/src/NavigationFocusedRouteStateContext").FocusedRouteState | undefined;
    readonly navigationRef: import("@react-navigation/core").NavigationContainerRefWithCurrent<ReactNavigation.RootParamList>;
    readonly routeNode: import("../Route").RouteNode | null;
    getRouteInfo(state?: import("./router-store").FocusedRouteState | import("./router-store").ReactNavigationState | undefined): import("./routeInfo").UrlObject;
    readonly redirects: import("./router-store").StoreRedirects[];
    readonly rootComponent: import("react").ComponentType<any>;
    readonly linking: import("../getLinkingConfig").ExpoLinkingOptions | undefined;
    setFocusedState(state: import("./router-store").FocusedRouteState): void;
    onReady(): void;
    assertIsReady(): void;
    navigate: (url: import("..").Href, options?: import("./routing").NavigationOptions) => void;
    push: (url: import("..").Href, options?: import("./routing").NavigationOptions) => void;
    dismiss: (count?: number) => void;
    dismissAll: () => void;
    dismissTo: (url: import("..").Href, options?: import("./routing").NavigationOptions) => void;
    canDismiss: () => boolean;
    replace: (url: import("..").Href, options?: import("./routing").NavigationOptions) => void;
    goBack: () => void;
    canGoBack: () => boolean;
    reload: () => void;
    prefetch: (url: import("..").Href, options?: import("./routing").NavigationOptions) => void;
    linkTo: (url: import("..").Href, options?: import("./routing").LinkToOptions) => void;
    setParams: (params?: Record<string, undefined | string | number | (string | number)[]>) => any;
    routeInfoSnapshot(): import("./routeInfo").UrlObject;
    cleanup(): void;
    subscribeToRootState(callback: () => void): void;
    applyRedirects(url?: string | null, redirects?: import("./router-store").StoreRedirects[]): string | undefined;
    readonly rootState: import("./router-store").ReactNavigationState | undefined;
    readonly routeInfo: import("./routeInfo").UrlObject;
    rootStateSnapshot(): import("./router-store").ReactNavigationState | undefined;
} | null>;
export declare const useExpoRouterStore: () => {
    shouldShowTutorial(): boolean;
    readonly state: import("./router-store").ReactNavigationState | undefined;
    readonly focusedState: import("@react-navigation/core/lib/typescript/src/NavigationFocusedRouteStateContext").FocusedRouteState | undefined;
    readonly navigationRef: import("@react-navigation/core").NavigationContainerRefWithCurrent<ReactNavigation.RootParamList>;
    readonly routeNode: import("../Route").RouteNode | null;
    getRouteInfo(state?: import("./router-store").FocusedRouteState | import("./router-store").ReactNavigationState | undefined): import("./routeInfo").UrlObject;
    readonly redirects: import("./router-store").StoreRedirects[];
    readonly rootComponent: import("react").ComponentType<any>;
    readonly linking: import("../getLinkingConfig").ExpoLinkingOptions | undefined;
    setFocusedState(state: import("./router-store").FocusedRouteState): void;
    onReady(): void;
    assertIsReady(): void;
    navigate: (url: import("..").Href, options?: import("./routing").NavigationOptions) => void;
    push: (url: import("..").Href, options?: import("./routing").NavigationOptions) => void;
    dismiss: (count?: number) => void;
    dismissAll: () => void;
    dismissTo: (url: import("..").Href, options?: import("./routing").NavigationOptions) => void;
    canDismiss: () => boolean;
    replace: (url: import("..").Href, options?: import("./routing").NavigationOptions) => void;
    goBack: () => void;
    canGoBack: () => boolean;
    reload: () => void;
    prefetch: (url: import("..").Href, options?: import("./routing").NavigationOptions) => void;
    linkTo: (url: import("..").Href, options?: import("./routing").LinkToOptions) => void;
    setParams: (params?: Record<string, undefined | string | number | (string | number)[]>) => any;
    routeInfoSnapshot(): import("./routeInfo").UrlObject;
    cleanup(): void;
    subscribeToRootState(callback: () => void): void;
    applyRedirects(url?: string | null, redirects?: import("./router-store").StoreRedirects[]): string | undefined;
    readonly rootState: import("./router-store").ReactNavigationState | undefined;
    readonly routeInfo: import("./routeInfo").UrlObject;
    rootStateSnapshot(): import("./router-store").ReactNavigationState | undefined;
};
//# sourceMappingURL=storeContext.d.ts.map